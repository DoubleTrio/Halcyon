--[[
    init.lua
    Created: 11/28/2023 00:57:31
    Description: Autogenerated script file for the map vast_steppe.
]]--
-- Commonly included lua functions and data
require 'origin.common'
require 'halcyon.GeneralFunctions'

local vast_steppe = {}
--------------------------------------------------
-- Map Callbacks
--------------------------------------------------
function vast_steppe.Init(zone)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  PrintInfo("=>> Init_vast_steppe")
  --Mark this as the last dungeon entered.
  SV.TemporaryFlags.LastDungeonEntered = 'vast_steppe'
  
end

function vast_steppe.EnterSegment(zone, rescuing, segmentID, mapID)
	if rescuing ~= true then
		COMMON.BeginDungeon(zone.ID, segmentID, mapID)
	end
end

function vast_steppe.Rescued(zone, name, mail)
	COMMON.Rescued(zone, name, mail)
end

function vast_steppe.ExitSegment(zone, result, rescue, segmentID, mapID)
  GeneralFunctions.RestoreIdleAnim()
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  PrintInfo("=>> ExitSegment_vast_steppe (Vast Steppe) result "..tostring(result).." segment "..tostring(segmentID))
  
  GeneralFunctions.CheckAllowSetRescue(zone.ID) 
  local exited = COMMON.ExitDungeonMissionCheck(result, rescue, zone.ID, segmentID)
  --always clear the Thief flag when leaving the dungeon via any means. UpdateDailyFlags does take care of this, but that won't always be called when leaving this dungeon.
  SV.adventure.Thief = false
	
	--[[Different dungeon result typeS (cleared, died, etc)
		   public enum ResultType
		{
			Unknown = -1,
			Downed,
			Failed,
			Cleared,
			Escaped,
			TimedOut,
			GaveUp,
			Rescue
		}
		]]--

	if exited == true then
		--do nothing
	elseif SV.ChapterProgression.Chapter == 5 and result ~= RogueEssence.Data.GameProgress.ResultType.Cleared then
		GAME:WaitFrames(20)	
		SV.Chapter5.LostSteppe = true--if escaped or died, they "lost" in the steppe and therefore they dallied somewhat in getting to the tunnel.
		if result ~= RogueEssence.Data.GameProgress.ResultType.Escaped then--Died
			SV.Chapter5.DiedSteppe = true
			--I use the components of the general function version of this so I can have the textbox pop up after the results screen
			--this saves the game, so it must be called 2nd to last.
			GAME:EndDungeonRun(result, "master_zone", -1, 46, 0, true, true)
			UI:SetSpeaker(GAME:GetPlayerPartyMember(3))--set audino as speaker 
			UI:SetSpeakerEmotion("Pain")
			UI:WaitShowDialogue("Oof![pause=0] It's t-too t-tough...")
			GeneralFunctions.DeathFadeOutDialogue(GAME:GetPlayerPartyMember(3), "W-we need to f-fall back...", "Pain")
			GAME:WaitFrames(20)
			GAME:EnterZone("master_zone", -1, 46, 0)--Exit back to Vast Steppe Entrance
		
		else--Escaped
			SV.Chapter5.EscapedSteppe = true
			GeneralFunctions.EndDungeonRun(result, "master_zone", -1, 46, 0, true, true) --Go to Vast Steppe Entrance ground map
		end
		
	elseif SV.ChapterProgression.Chapter == 5 and result == RogueEssence.Data.GameProgress.ResultType.Cleared then
		--Made it through Vast Steppe in chapter 5.
		GeneralFunctions.EndDungeonRun(result, "master_zone", -1, 47, 0, false, false) --Go to Searing Tunnel Entrance ground map

	else--generic win/loss. Works for both cases outside chapter 5 since there's no end of dungeon map.
		if result ~= RogueEssence.Data.GameProgress.ResultType.Cleared then 
			--Other zones have a 20 frame wait on not winning, so adding this here for consistency.
			GAME:WaitFrames(20)
		end
			
		SV.TemporaryFlags.Dinnertime = true 
		SV.TemporaryFlags.Bedtime = true
		SV.TemporaryFlags.MorningWakeup = true 
		SV.TemporaryFlags.MorningAddress = true 
		
		--Go to dinner if a mission wasn't completed, otherwise, go to 2nd floor
		local exit_ground = 6
		if SV.TemporaryFlags.MissionCompleted then exit_ground = 22 end 
		GeneralFunctions.EndDungeonRun(result, "master_zone", -1, exit_ground, 0, true, true)
	end
end
	

return vast_steppe